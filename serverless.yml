# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: raveri
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: shopify-erp-serverless-integration
# "service" is the name of this project. This will also be added to your AWS resource names.
service: shopify-erp-serverless-integration

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-central-1
  environment:
    WEBHOOK_SIGNATURE: ${env:WEBHOOK_SIGNATURE}
    ORDER_QUEUE_URL:
      Ref: OrderQueue
    DYNAMODB_TABLE: OrderTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource:
        - arn:aws:sqs:${self:provider.region}:${aws:accountId}:OrderQueue
        - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/OrderTable

functions:
  receiveWebhook:
    handler: handler.webhook
    events:
      - http:
          path: webhook/order
          method: post

  processOrder:
    handler: handler.processOrder
    events:
      - sqs:
          arn:
            Fn::GetAtt: [OrderQueue, Arn]

useDotenv: true

resources:
  Resources:
    OrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: OrderQueue

    OrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: OrderTable
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH  # La chiave primaria sar√† l'ID dell'ordine
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification: # Configura il TTL
          AttributeName: ttl  # Attributo utilizzato per il TTL
          Enabled: true

plugins:
  - serverless-offline
