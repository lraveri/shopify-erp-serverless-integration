# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: raveri
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: shopify-erp-serverless-integration
# "service" is the name of this project. This will also be added to your AWS resource names.
service: shopify-erp-serverless-integration

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-central-1
  stage: dev
  environment:
    WEBHOOK_SIGNATURE: ${env:WEBHOOK_SIGNATURE}
    ORDER_QUEUE_URL:
      Ref: OrderQueue
    DYNAMODB_TABLE: OrderTable
    ERROR_ALERT_TOPIC_ARN:
      Ref: MyAlertTopic  # Correzione della referenza per il topic SNS
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - dynamodb:PutItem
        - dynamodb:GetItem
        - sns:Publish  # Permesso per inviare notifiche via SNS
      Resource:
        - arn:aws:sqs:${self:provider.region}:${aws:accountId}:OrderQueue
        - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/OrderTable
        - arn:aws:sns:${self:provider.region}:${aws:accountId}:lambda-error-alert-topic  # Correzione della risorsa SNS

functions:
  receiveWebhook:
    handler: handler.webhook
    events:
      - http:
          path: webhook/order
          method: post

  processOrder:
    handler: handler.processOrder
    events:
      - sqs:
          arn:
            Fn::GetAtt: [OrderQueue, Arn]

  errorNotifier:
    handler: handler.notifyError
    events:
      - cloudwatchLog:
          logGroup: /aws/lambda/${self:service}-${self:provider.stage}-processOrder
          filter: '"ERROR"'  # Filtro per catturare gli errori nei log

useDotenv: true

resources:
  Resources:
    OrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: OrderQueue

    OrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: OrderTable
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    ProcessOrderLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-processOrder
        RetentionInDays: 14

    ProcessOrderErrorMetricFilter:
      Type: AWS::Logs::MetricFilter
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-processOrder
        FilterPattern: '"ERROR"'
        MetricTransformations:
          - MetricValue: 1
            MetricNamespace: "ProcessOrderErrors"
            MetricName: "LambdaErrorCount"

    ProcessOrderErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ProcessOrderErrorAlarm
        AlarmDescription: "Allarme per errori nella funzione Lambda processOrder"
        Namespace: "ProcessOrderErrors"
        MetricName: "LambdaErrorCount"
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        AlarmActions:
          - Ref: MyAlertTopic

    MyAlertTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: lambda-error-alert-topic

    MyAlertSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: lucaraveri993@gmail.com
        TopicArn:
          Ref: MyAlertTopic
